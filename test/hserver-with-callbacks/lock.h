/*
 * Please do not edit this file.
 * It was generated using rpcgen.
 */

#ifndef _LOCK_H_RPCGEN
#define _LOCK_H_RPCGEN

#include <rpc/rpc.h>

#include <pthread.h>

#ifdef __cplusplus
extern "C" {
#endif

#define MAXNAMELEN 256
#define HASHLENGTH 20
#define MAXHASHES 1024

typedef char *fname;

struct callback_args {
	int prog;
	int vers;
	int proto;
};
typedef struct callback_args callback_args;

struct hash_args {
	int cbid;
	fname name;
};
typedef struct hash_args hash_args;

typedef char *hash;

struct hash_res {
	hash digest;
};
typedef struct hash_res hash_res;

typedef struct {
	u_int hash_resp_len;
	hash_res *hash_resp_val;
} hash_resp;

struct put_hashes_1_argument {
	fname name;
	hash_resp arg2;
};
typedef struct put_hashes_1_argument put_hashes_1_argument;

#define locksvc 0x20000001
#define v1 1

#if defined(__STDC__) || defined(__cplusplus)
#define register_cb 1
extern  enum clnt_stat register_cb_1(callback_args , int *, CLIENT *);
extern  bool_t register_cb_1_svc(callback_args , int *, struct svc_req *);
#define get_hashes 2
extern  enum clnt_stat get_hashes_1(hash_args , hash_resp *, CLIENT *);
extern  bool_t get_hashes_1_svc(hash_args , hash_resp *, struct svc_req *);
#define put_hashes 3
extern  enum clnt_stat put_hashes_1(fname , hash_resp , int *, CLIENT *);
extern  bool_t put_hashes_1_svc(fname , hash_resp , int *, struct svc_req *);
extern int locksvc_1_freeresult (SVCXPRT *, xdrproc_t, caddr_t);

#else /* K&R C */
#define register_cb 1
extern  enum clnt_stat register_cb_1();
extern  bool_t register_cb_1_svc();
#define get_hashes 2
extern  enum clnt_stat get_hashes_1();
extern  bool_t get_hashes_1_svc();
#define put_hashes 3
extern  enum clnt_stat put_hashes_1();
extern  bool_t put_hashes_1_svc();
extern int locksvc_1_freeresult ();
#endif /* K&R C */

/* the xdr functions */

#if defined(__STDC__) || defined(__cplusplus)
extern  bool_t xdr_fname (XDR *, fname*);
extern  bool_t xdr_callback_args (XDR *, callback_args*);
extern  bool_t xdr_hash_args (XDR *, hash_args*);
extern  bool_t xdr_hash (XDR *, hash*);
extern  bool_t xdr_hash_res (XDR *, hash_res*);
extern  bool_t xdr_hash_resp (XDR *, hash_resp*);
extern  bool_t xdr_put_hashes_1_argument (XDR *, put_hashes_1_argument*);

#else /* K&R C */
extern bool_t xdr_fname ();
extern bool_t xdr_callback_args ();
extern bool_t xdr_hash_args ();
extern bool_t xdr_hash ();
extern bool_t xdr_hash_res ();
extern bool_t xdr_hash_resp ();
extern bool_t xdr_put_hashes_1_argument ();

#endif /* K&R C */

#ifdef __cplusplus
}
#endif

#endif /* !_LOCK_H_RPCGEN */
